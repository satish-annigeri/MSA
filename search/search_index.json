{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MSA \u00b6 MSA is short for Matrix Structural Analysis , and referes to the analysis of skeletal structures using the direct stiffness method. Python package for the direct stiffness method of matrix analysis of skeletal structures. At present a subpackage pf for analysis of plane frames has been implemented. Code is based on the flow charts in Weaver and Gere and an example is taken from Hall and Kabaila . References \u00b6 Weaver, W. and Gere, J.M., Matrix Analysis of Framed Structures , 2ed., CBS Publishers, New Delhi, 1986 Hall, A. and Kabaila, A.P., Basic Concepts of Structural Analysis , Pitman Publishing, London, 1977 Install \u00b6 Clone Source from github \u00b6 Clone the github repository and change into the directory. Examine the directory tree. You must have git installed on your machine. >git clone https://github.com/satish-annigeri/MSA.git >cd MSA Create Virtual Environment \u00b6 Create a virtual environment and install required packages. On MS Windows do: >python -m venv venv >venv\\Scripts\\activate.bat >(venv) On *nix systems do: $python3 -m venv venv $source venv\\bin $(venv) Update pip >(venv) python -m pip install -U pip Install pip-tools and generate requirements.txt files. >(venv) pip install -U pip-tools >(venv) pip-compile requirements.in dev-requirements.in >(venv) pip-sync requirements.txt dev-requirements.txt Execute the built-in examples in the package. >(venv) python -m msa Study the __main__.py scripts inside the msa package and write your own scripts. Finally deactivate the virtual environment. >(venv) deactivate > Limitations \u00b6 The package has the following limitations Analyses only plane frame structures, with only plane frame elements. Non-zero boundary conditions are currently not allowed. Only known zerodisplacement boundary condition is implemented. Member loads must be applied as equivalent member end-forces. Equivalent member end-forces must be calculated manually as the negative values from the reactions produces in the corresponding fixed-end member. Only member end-forces are calculates. Forces at points within the member are not calculated.","title":"Home"},{"location":"#welcome-to-msa","text":"MSA is short for Matrix Structural Analysis , and referes to the analysis of skeletal structures using the direct stiffness method. Python package for the direct stiffness method of matrix analysis of skeletal structures. At present a subpackage pf for analysis of plane frames has been implemented. Code is based on the flow charts in Weaver and Gere and an example is taken from Hall and Kabaila .","title":"Welcome to MSA"},{"location":"#references","text":"Weaver, W. and Gere, J.M., Matrix Analysis of Framed Structures , 2ed., CBS Publishers, New Delhi, 1986 Hall, A. and Kabaila, A.P., Basic Concepts of Structural Analysis , Pitman Publishing, London, 1977","title":"References"},{"location":"#install","text":"","title":"Install"},{"location":"#clone-source-from-github","text":"Clone the github repository and change into the directory. Examine the directory tree. You must have git installed on your machine. >git clone https://github.com/satish-annigeri/MSA.git >cd MSA","title":"Clone Source from github"},{"location":"#create-virtual-environment","text":"Create a virtual environment and install required packages. On MS Windows do: >python -m venv venv >venv\\Scripts\\activate.bat >(venv) On *nix systems do: $python3 -m venv venv $source venv\\bin $(venv) Update pip >(venv) python -m pip install -U pip Install pip-tools and generate requirements.txt files. >(venv) pip install -U pip-tools >(venv) pip-compile requirements.in dev-requirements.in >(venv) pip-sync requirements.txt dev-requirements.txt Execute the built-in examples in the package. >(venv) python -m msa Study the __main__.py scripts inside the msa package and write your own scripts. Finally deactivate the virtual environment. >(venv) deactivate >","title":"Create Virtual Environment"},{"location":"#limitations","text":"The package has the following limitations Analyses only plane frame structures, with only plane frame elements. Non-zero boundary conditions are currently not allowed. Only known zerodisplacement boundary condition is implemented. Member loads must be applied as equivalent member end-forces. Equivalent member end-forces must be calculated manually as the negative values from the reactions produces in the corresponding fixed-end member. Only member end-forces are calculates. Forces at points within the member are not calculated.","title":"Limitations"},{"location":"api/","text":"API Reference \u00b6 Plane Frame Package \u00b6 Python package for analysis of skeletal structures using the direct stiffness method. The code is based on the theory and flowcharts in Weaver, W. and Gere, J.M., Matrix Analysis of Framed Structures , CBS Publishers, New Delhi, 1986. The package pf implements the analysis of plane frames. pf_assem_loadvec_jl ( lm , df_jtloads , P ) \u00b6 Superpose joint loads on structure load vector Parameters: lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node df_jtloads ( pd . DataFrame ) \u2013 Nodal loads table P ( NDArrayFloat ) \u2013 Load vector Returns: NDArrayFloat \u2013 Modified load vector after superposing all nodal loads Source code in msa\\pf.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 def pf_assem_loadvec_jl ( lm , df_jtloads , P ): \"\"\"Superpose joint loads on structure load vector Parameters ---------- lm : NDArrayInt Location matrix, specifying degree of freedom number for each node df_jtloads : pd.DataFrame Nodal loads table P : NDArrayFloat Load vector Returns ------- NDArrayFloat Modified load vector after superposing all nodal loads \"\"\" nloads = len ( df_jtloads ) for iload in range ( nloads ): jt = int ( df_jtloads . iloc [ iload , 0 ]) jtdof = lm [ jt - 1 , :] for j in range ( 3 ): if jtdof [ j ]: i = jtdof [ j ] - 1 P [ i ] += df_jtloads . iloc [ iload , j + 1 ] return P pf_assem_loadvec_ml ( iload , df_xy , df_conn , lm , df_memloads , P ) \u00b6 Superpose equivalent joint loads due to loads applied on members onto structure load vector Parameters: iload ( int ) \u2013 Number of member load df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node df_memloads ( pd . DataFrame ) \u2013 Member load table P ( Load vector ) \u2013 description Returns: NDArrayFloat \u2013 Modified load vector after superposing member load number iload Source code in msa\\pf.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def pf_assem_loadvec_ml ( iload , df_xy , df_conn , lm , df_memloads , P ): \"\"\"Superpose equivalent joint loads due to loads applied on members onto structure load vector Parameters ---------- iload : int Number of member load df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members lm : NDArrayInt Location matrix, specifying degree of freedom number for each node df_memloads : pd.DataFrame Member load table P : Load vector _description_ Returns ------- NDArrayFloat Modified load vector after superposing member load number `iload` \"\"\" imem = int ( df_memloads . iloc [ iload - 1 , 0 ]) xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) r = pf_calcrot ( dc ) ml = df_memloads . iloc [ iload - 1 , 1 : 7 ] # ml = ml.reshape(len(ml), 1) ml = ml . values am = np . dot ( - r . T , ml ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( 6 ): if memdof [ i ]: ii = memdof [ i ] - 1 P [ ii ] += am [ i ] return P pf_assemssm ( imem , df_xy , df_conn , df_mprop , lm , ssm ) \u00b6 Superpose stiffness matrix of plane frame member on the structure stiffness matrix Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table lm ( NDArrayFloat ) \u2013 Location matrix, specifying degree of freedom number for each node ssm ( NDArrayFloat ) \u2013 Structure stiffness matrix, initially a zero matrix Returns: NDArrayFloat \u2013 Structure stiffness matrix, after superposition of global stiffness of all members Source code in msa\\pf.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def pf_assemssm ( imem , df_xy , df_conn , df_mprop , lm , ssm ): \"\"\"Superpose stiffness matrix of plane frame member on the structure stiffness matrix Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table lm : NDArrayFloat Location matrix, specifying degree of freedom number for each node ssm : NDArrayFloat Structure stiffness matrix, initially a zero matrix Returns ------- NDArrayFloat Structure stiffness matrix, after superposition of global stiffness of all members \"\"\" K = pf_gstiff ( imem , df_xy , df_conn , df_mprop ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( len ( memdof )): if memdof [ i ]: for j in range ( len ( memdof )): if memdof [ j ]: ii = memdof [ i ] - 1 jj = memdof [ j ] - 1 ssm [ ii , jj ] += K [ i , j ] return ssm pf_calclen ( xy1 , xy2 ) \u00b6 Calculate length and direction cosines of a plane frame member Parameters: xy1 ( NDArrayFloat shape (2,) ) \u2013 (x, y) coordinates of node 1 xy2 ( NDArrayFloat shape (2,) ) \u2013 (x, y) coordinates of node 2 Returns: float \u2013 Length of the member Source code in msa\\pf.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def pf_calclen ( xy1 , xy2 ): \"\"\"Calculate length and direction cosines of a plane frame member Parameters ---------- xy1 : NDArrayFloat shape (2,) (x, y) coordinates of node 1 xy2 : NDArrayFloat shape (2,) (x, y) coordinates of node 2 Returns ------- float Length of the member \"\"\" delta = xy2 - xy1 L = np . sqrt ( np . sum ( delta ** 2 )) dc = delta / L return L , dc pf_calclm ( n , df_bc ) \u00b6 Calculate location matrix containing degree of freedom numbers of each node Parameters: n ( int ) \u2013 Number of nodes in the structure df_bc ( pd . DataFrame ) \u2013 Boundary condition for each degree of freedom of each node. 1 is restrained and 0 is unrestrained. Returns: lm ( NDArrayInt ) \u2013 Integer array with degree of freedom number of each nodal displacement nd ( int ) \u2013 Number of degrees of freedom of the structure Source code in msa\\pf.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def pf_calclm ( n , df_bc : pd . DataFrame ): \"\"\"Calculate location matrix containing degree of freedom numbers of each node Parameters ---------- n : int Number of nodes in the structure df_bc : pd.DataFrame Boundary condition for each degree of freedom of each node. 1 is restrained and 0 is unrestrained. Returns ------- lm : NDArrayInt Integer array with degree of freedom number of each nodal displacement nd : int Number of degrees of freedom of the structure \"\"\" lm = np . zeros (( n , 3 ), dtype = np . int_ ) nd = 0 ns = len ( df_bc ) for i in range ( ns ): node = int ( df_bc . iloc [ i , 0 ]) # type: ignore lm [ node - 1 , 0 : 3 ] = df_bc . iloc [ i , 1 : 4 ] for node in range ( n ): for j in range ( 3 ): if lm [ node , j ] == 0 : nd += 1 lm [ node , j ] = nd else : lm [ node , j ] = 0 return lm , nd pf_calcrot ( dc ) \u00b6 Calculate rotation matrix of a plane frame member given its direction cosines Parameters: dc ( NDArrayFloat shape (2,) ) \u2013 Direction cosines of the member with reference to x-y axes Returns: NDArrayFloat shape (6, 6) \u2013 Rotation matrix to transform local stiffness matrix to global stiffness matrix Source code in msa\\pf.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def pf_calcrot ( dc ): \"\"\"Calculate rotation matrix of a plane frame member given its direction cosines Parameters ---------- dc : NDArrayFloat shape (2,) Direction cosines of the member with reference to x-y axes Returns ------- NDArrayFloat shape (6, 6) Rotation matrix to transform local stiffness matrix to global stiffness matrix \"\"\" r = np . zeros (( 6 , 6 ), dtype = float ) cx = dc [ 0 ] cy = dc [ 1 ] r [ 0 , 0 ] = cx r [ 0 , 1 ] = cy r [ 1 , 0 ] = - cy r [ 1 , 1 ] = cx r [ 2 , 2 ] = 1 r [ 3 : 6 , 3 : 6 ] = r [ 0 : 3 , 0 : 3 ] return r pf_get_dof ( imem , df_conn , lm ) \u00b6 Return degree of freedom numbers of the ends of a plane frame member Parameters: imem ( int ) \u2013 Number of the member df_conn ( pd . DataFrame ) \u2013 Connectivity of members lm ( NDArrayFloat ) \u2013 Location matrix, specifying degree of freedom number for each node Returns: NDArrayInt \u2013 Degree of freedom numbers for node1 and node2 Source code in msa\\pf.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def pf_get_dof ( imem , df_conn , lm ): \"\"\"Return degree of freedom numbers of the ends of a plane frame member Parameters ---------- imem : int Number of the member df_conn : pd.DataFrame Connectivity of members lm : NDArrayFloat Location matrix, specifying degree of freedom number for each node Returns ------- NDArrayInt Degree of freedom numbers for node1 and node2 \"\"\" jt1 , jt2 = pf_get_endjts ( imem , df_conn ) memdof = np . array ([ 0 , 0 , 0 , 0 , 0 , 0 ]) memdof [ 0 : 3 ] = lm [ jt1 - 1 , :] memdof [ 3 : 6 ] = lm [ jt2 - 1 , :] return memdof pf_get_endcoord ( imem , df_xy , df_conn ) \u00b6 Return the coordinates of the first and second end of a plane frame member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members Returns: xy1 ( Float ) \u2013 Coordinate of node1 xy2 ( Float ) \u2013 Coordinate of node2 Source code in msa\\pf.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def pf_get_endcoord ( imem , df_xy , df_conn ): \"\"\"Return the coordinates of the first and second end of a plane frame member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members Returns ------- xy1 : Float Coordinate of node1 xy2 : Float Coordinate of node2 \"\"\" jt1 , jt2 = pf_get_endjts ( imem , df_conn ) xy1 = df_xy . iloc [ int ( jt1 ) - 1 , :] # type: ignore xy2 = df_xy . iloc [ int ( jt2 ) - 1 , :] # type: ignore return xy1 , xy2 pf_get_endjts ( imem , df_conn ) \u00b6 Return numbers of first and second end of a plane frame member Parameters: imem ( int ) \u2013 Number of member df_conn ( pd . DataFrame ) \u2013 Connectivity matrix Returns: jt1 ( int ) \u2013 Node1 jt2 ( int ) \u2013 Node 2 Source code in msa\\pf.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def pf_get_endjts ( imem , df_conn : pd . DataFrame ): \"\"\"Return numbers of first and second end of a plane frame member Parameters ---------- imem : int Number of member df_conn : pd.DataFrame Connectivity matrix Returns ------- jt1 : int Node1 jt2 : int Node 2 \"\"\" jt1 , jt2 = df_conn . iloc [ imem - 1 , 0 : 2 ] return jt1 , jt2 pf_get_memprop ( imem , df_xy , df_conn , df_mprop ) \u00b6 Return the material properties of specified plane frame member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: E ( float ) \u2013 Modulus of elasticity of the member A ( float ) \u2013 Cross-section area of member Iz ( float ) \u2013 Second moment of area of cross-section of the member about the axis of bending L ( float ) \u2013 Length of the member dc ( NDArrayFloat ) \u2013 Direction cosines of the member Source code in msa\\pf.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def pf_get_memprop ( imem , df_xy , df_conn , df_mprop ): \"\"\"Return the material properties of specified plane frame member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table Returns ------- E : float Modulus of elasticity of the member A : float Cross-section area of member Iz : float Second moment of area of cross-section of the member about the axis of bending L : float Length of the member dc : NDArrayFloat Direction cosines of the member \"\"\" m = df_conn . iloc [ imem - 1 , 2 ] - 1 E = df_mprop . iloc [ m , 0 ] A = df_mprop . iloc [ m , 1 ] Iz = df_mprop . iloc [ m , 2 ] xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) return E , A , Iz , L , dc pf_gstiff ( imem , df_xy , df_conn , df_mprop ) \u00b6 Calculate the stiffness matrix of a plane frame member in strucutre coordinate system Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: NDArray \u2013 Global stiffness matrix of the member Source code in msa\\pf.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 def pf_gstiff ( imem , df_xy , df_conn , df_mprop ): \"\"\"Calculate the stiffness matrix of a plane frame member in strucutre coordinate system Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table Returns ------- NDArray Global stiffness matrix of the member \"\"\" E , A , Iz , L , dc = pf_get_memprop ( imem , df_xy , df_conn , df_mprop ) r = pf_calcrot ( dc ) k = pf_stiff ( E , A , Iz , L ) return r . T @ k @ r pf_loadvec ( df_xy , df_conn , df_jtloads , df_memloads , ndof , lm ) \u00b6 Assemble structure load vector due to joint loads and loads applied directly on members Parameters: df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_jtloads ( pd . DataFrame ) \u2013 Nodal loads table df_memloads ( pd . DataFrame ) \u2013 Member load table ndof ( int ) \u2013 Number of degrees of freedom of the structure lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node Returns: NDArrayFloat \u2013 Modified load vector after superposing all member loads Source code in msa\\pf.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 def pf_loadvec ( df_xy , df_conn , df_jtloads , df_memloads , ndof , lm ): \"\"\"Assemble structure load vector due to joint loads and loads applied directly on members Parameters ---------- df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_jtloads : pd.DataFrame Nodal loads table df_memloads : pd.DataFrame Member load table ndof : int Number of degrees of freedom of the structure lm : NDArrayInt Location matrix, specifying degree of freedom number for each node Returns ------- NDArrayFloat Modified load vector after superposing all member loads \"\"\" P = np . zeros (( ndof , 1 ), dtype = float ) P = pf_assem_loadvec_jl ( lm , df_jtloads , P ) nml = len ( df_memloads ) for iload in range ( 1 , nml + 1 ): P = pf_assem_loadvec_ml ( iload , df_xy , df_conn , lm , df_memloads , P ) return P pf_mem_endforces ( imem , df_xy , df_conn , df_mprop , df_memloads , lm , x ) \u00b6 Calculate member end forces from joint displacements, for one chosen member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table df_memloads ( pd . DataFrame ) \u2013 Member load table lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node x ( NDArrayFloat ) \u2013 Displacement vector Returns: NDArrayFloat \u2013 Vector of member end forces Source code in msa\\pf.py 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 def pf_mem_endforces ( imem , df_xy , df_conn , df_mprop , df_memloads , lm , x ): \"\"\"Calculate member end forces from joint displacements, for one chosen member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table df_memloads : pd.DataFrame Member load table lm : NDArrayInt Location matrix, specifying degree of freedom number for each node x : NDArrayFloat Displacement vector Returns ------- NDArrayFloat Vector of member end forces \"\"\" xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) E , A , Iz , L , dc = pf_get_memprop ( imem , df_xy , df_conn , df_mprop ) r = pf_calcrot ( dc ) u = np . zeros (( 6 , 1 ), dtype = float ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( 6 ): if memdof [ i ]: idof = memdof [ i ] u [ i ] = x [ idof - 1 ] uu = np . dot ( r , u ) k = pf_stiff ( E , A , Iz , L ) f = np . zeros (( 6 , 1 ), dtype = float ) f = np . dot ( k , uu ) nml = len ( df_memloads ) for i in range ( nml ): if df_memloads . iloc [ i , 0 ] == imem : f += df_memloads . iloc [ i , 1 :] . values . reshape ( 6 , 1 ) return f pf_ssm ( df_xy , df_conn , df_bc , df_mprop ) \u00b6 Assemble structure stiffness matrix by superposing stiffness matrices of individual members Parameters: df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_bc ( pd . DataFrame ) \u2013 Zero boundary conditions table, for nodes with one or more constrained degrees of freedom df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: ssm ( NDArrayFloat ) \u2013 Structure stiffness matrix of the structure lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node ndof ( int ) \u2013 Number of degrees of freedom of the structure Source code in msa\\pf.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 def pf_ssm ( df_xy , df_conn , df_bc , df_mprop ): \"\"\"Assemble structure stiffness matrix by superposing stiffness matrices of individual members Parameters ---------- df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_bc : pd.DataFrame Zero boundary conditions table, for nodes with one or more constrained degrees of freedom df_mprop : pd.DataFrame Material properties table Returns ------- ssm : NDArrayFloat Structure stiffness matrix of the structure lm : NDArrayInt Location matrix, specifying degree of freedom number for each node ndof : int Number of degrees of freedom of the structure \"\"\" n = len ( df_xy ) lm , ndof = pf_calclm ( n , df_bc ) nmem = len ( df_conn ) ssm = np . zeros (( ndof , ndof ), dtype = float ) for imem in range ( 1 , nmem + 1 ): ssm = pf_assemssm ( imem , df_xy , df_conn , df_mprop , lm , ssm ) return ssm , lm , ndof pf_stiff ( E , A , Iz , L ) \u00b6 Calculate stiffness of a plane frame member in local coordinate system Parameters: E ( float ) \u2013 Modulus of elasticity of material of the member A ( float ) \u2013 Cross-section area of the member Iz ( float ) \u2013 Second moment of area of the member about the axis of bending L ( float ) \u2013 Length of the member Returns: NDArrayFloat \u2013 Stiffness matrix of member about local axes Source code in msa\\pf.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def pf_stiff ( E : float , A : float , Iz : float , L : float ) -> NDArrayFloat : \"\"\"Calculate stiffness of a plane frame member in local coordinate system Parameters ---------- E : float Modulus of elasticity of material of the member A : float Cross-section area of the member Iz : float Second moment of area of the member about the axis of bending L : float Length of the member Returns ------- NDArrayFloat Stiffness matrix of member about local axes \"\"\" k = np . zeros (( 6 , 6 ), dtype = float ) k [ 0 , 0 ] = float ( E ) * A / L k [ 0 , 3 ] = - k [ 0 , 0 ] k [ 1 , 1 ] = ( 12.0 * E * Iz ) / L ** 3 k [ 1 , 2 ] = ( 6.0 * E * Iz ) / L ** 2 k [ 1 , 4 ] = - k [ 1 , 1 ] k [ 1 , 5 ] = k [ 1 , 2 ] k [ 2 , 2 ] = ( 4.0 * E * Iz ) / L k [ 2 , 4 ] = - k [ 1 , 2 ] k [ 2 , 5 ] = k [ 2 , 2 ] / 2.0 k [ 3 , 3 ] = k [ 0 , 0 ] k [ 4 , 4 ] = k [ 1 , 1 ] k [ 4 , 5 ] = - k [ 1 , 2 ] k [ 5 , 5 ] = k [ 2 , 2 ] for i in range ( 6 ): for j in range ( i ): k [ i , j ] = k [ j , i ] return k print_mat ( header , k ) \u00b6 Print the array k, preceded by a header string. Each element of k is printed using the format string fmt Parameters: header ( str ) \u2013 Header to be printed before printing the matrix k ( npt . NDArray [ Any ] ) \u2013 Matrix to be printed Source code in msa\\pf.py 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def print_mat ( header : str , k : npt . NDArray [ Any ]) -> None : \"\"\"Print the array k, preceded by a header string. Each element of k is printed using the format string fmt Parameters ---------- header : str Header to be printed before printing the matrix k : npt.NDArray[Any] Matrix to be printed \"\"\" m , n = k . shape print ( f \" { header } Size: { m } x { n } \" ) for i in range ( m ): for j in range ( n ): print ( f \" { k [ i , j ] : 12.4f } \" , end = \"\" ) print ()","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#plane-frame-package","text":"Python package for analysis of skeletal structures using the direct stiffness method. The code is based on the theory and flowcharts in Weaver, W. and Gere, J.M., Matrix Analysis of Framed Structures , CBS Publishers, New Delhi, 1986. The package pf implements the analysis of plane frames.","title":"Plane Frame Package"},{"location":"api/#msa.pf.pf_assem_loadvec_jl","text":"Superpose joint loads on structure load vector Parameters: lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node df_jtloads ( pd . DataFrame ) \u2013 Nodal loads table P ( NDArrayFloat ) \u2013 Load vector Returns: NDArrayFloat \u2013 Modified load vector after superposing all nodal loads Source code in msa\\pf.py 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 def pf_assem_loadvec_jl ( lm , df_jtloads , P ): \"\"\"Superpose joint loads on structure load vector Parameters ---------- lm : NDArrayInt Location matrix, specifying degree of freedom number for each node df_jtloads : pd.DataFrame Nodal loads table P : NDArrayFloat Load vector Returns ------- NDArrayFloat Modified load vector after superposing all nodal loads \"\"\" nloads = len ( df_jtloads ) for iload in range ( nloads ): jt = int ( df_jtloads . iloc [ iload , 0 ]) jtdof = lm [ jt - 1 , :] for j in range ( 3 ): if jtdof [ j ]: i = jtdof [ j ] - 1 P [ i ] += df_jtloads . iloc [ iload , j + 1 ] return P","title":"pf_assem_loadvec_jl()"},{"location":"api/#msa.pf.pf_assem_loadvec_ml","text":"Superpose equivalent joint loads due to loads applied on members onto structure load vector Parameters: iload ( int ) \u2013 Number of member load df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node df_memloads ( pd . DataFrame ) \u2013 Member load table P ( Load vector ) \u2013 description Returns: NDArrayFloat \u2013 Modified load vector after superposing member load number iload Source code in msa\\pf.py 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 def pf_assem_loadvec_ml ( iload , df_xy , df_conn , lm , df_memloads , P ): \"\"\"Superpose equivalent joint loads due to loads applied on members onto structure load vector Parameters ---------- iload : int Number of member load df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members lm : NDArrayInt Location matrix, specifying degree of freedom number for each node df_memloads : pd.DataFrame Member load table P : Load vector _description_ Returns ------- NDArrayFloat Modified load vector after superposing member load number `iload` \"\"\" imem = int ( df_memloads . iloc [ iload - 1 , 0 ]) xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) r = pf_calcrot ( dc ) ml = df_memloads . iloc [ iload - 1 , 1 : 7 ] # ml = ml.reshape(len(ml), 1) ml = ml . values am = np . dot ( - r . T , ml ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( 6 ): if memdof [ i ]: ii = memdof [ i ] - 1 P [ ii ] += am [ i ] return P","title":"pf_assem_loadvec_ml()"},{"location":"api/#msa.pf.pf_assemssm","text":"Superpose stiffness matrix of plane frame member on the structure stiffness matrix Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table lm ( NDArrayFloat ) \u2013 Location matrix, specifying degree of freedom number for each node ssm ( NDArrayFloat ) \u2013 Structure stiffness matrix, initially a zero matrix Returns: NDArrayFloat \u2013 Structure stiffness matrix, after superposition of global stiffness of all members Source code in msa\\pf.py 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 def pf_assemssm ( imem , df_xy , df_conn , df_mprop , lm , ssm ): \"\"\"Superpose stiffness matrix of plane frame member on the structure stiffness matrix Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table lm : NDArrayFloat Location matrix, specifying degree of freedom number for each node ssm : NDArrayFloat Structure stiffness matrix, initially a zero matrix Returns ------- NDArrayFloat Structure stiffness matrix, after superposition of global stiffness of all members \"\"\" K = pf_gstiff ( imem , df_xy , df_conn , df_mprop ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( len ( memdof )): if memdof [ i ]: for j in range ( len ( memdof )): if memdof [ j ]: ii = memdof [ i ] - 1 jj = memdof [ j ] - 1 ssm [ ii , jj ] += K [ i , j ] return ssm","title":"pf_assemssm()"},{"location":"api/#msa.pf.pf_calclen","text":"Calculate length and direction cosines of a plane frame member Parameters: xy1 ( NDArrayFloat shape (2,) ) \u2013 (x, y) coordinates of node 1 xy2 ( NDArrayFloat shape (2,) ) \u2013 (x, y) coordinates of node 2 Returns: float \u2013 Length of the member Source code in msa\\pf.py 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def pf_calclen ( xy1 , xy2 ): \"\"\"Calculate length and direction cosines of a plane frame member Parameters ---------- xy1 : NDArrayFloat shape (2,) (x, y) coordinates of node 1 xy2 : NDArrayFloat shape (2,) (x, y) coordinates of node 2 Returns ------- float Length of the member \"\"\" delta = xy2 - xy1 L = np . sqrt ( np . sum ( delta ** 2 )) dc = delta / L return L , dc","title":"pf_calclen()"},{"location":"api/#msa.pf.pf_calclm","text":"Calculate location matrix containing degree of freedom numbers of each node Parameters: n ( int ) \u2013 Number of nodes in the structure df_bc ( pd . DataFrame ) \u2013 Boundary condition for each degree of freedom of each node. 1 is restrained and 0 is unrestrained. Returns: lm ( NDArrayInt ) \u2013 Integer array with degree of freedom number of each nodal displacement nd ( int ) \u2013 Number of degrees of freedom of the structure Source code in msa\\pf.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def pf_calclm ( n , df_bc : pd . DataFrame ): \"\"\"Calculate location matrix containing degree of freedom numbers of each node Parameters ---------- n : int Number of nodes in the structure df_bc : pd.DataFrame Boundary condition for each degree of freedom of each node. 1 is restrained and 0 is unrestrained. Returns ------- lm : NDArrayInt Integer array with degree of freedom number of each nodal displacement nd : int Number of degrees of freedom of the structure \"\"\" lm = np . zeros (( n , 3 ), dtype = np . int_ ) nd = 0 ns = len ( df_bc ) for i in range ( ns ): node = int ( df_bc . iloc [ i , 0 ]) # type: ignore lm [ node - 1 , 0 : 3 ] = df_bc . iloc [ i , 1 : 4 ] for node in range ( n ): for j in range ( 3 ): if lm [ node , j ] == 0 : nd += 1 lm [ node , j ] = nd else : lm [ node , j ] = 0 return lm , nd","title":"pf_calclm()"},{"location":"api/#msa.pf.pf_calcrot","text":"Calculate rotation matrix of a plane frame member given its direction cosines Parameters: dc ( NDArrayFloat shape (2,) ) \u2013 Direction cosines of the member with reference to x-y axes Returns: NDArrayFloat shape (6, 6) \u2013 Rotation matrix to transform local stiffness matrix to global stiffness matrix Source code in msa\\pf.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 def pf_calcrot ( dc ): \"\"\"Calculate rotation matrix of a plane frame member given its direction cosines Parameters ---------- dc : NDArrayFloat shape (2,) Direction cosines of the member with reference to x-y axes Returns ------- NDArrayFloat shape (6, 6) Rotation matrix to transform local stiffness matrix to global stiffness matrix \"\"\" r = np . zeros (( 6 , 6 ), dtype = float ) cx = dc [ 0 ] cy = dc [ 1 ] r [ 0 , 0 ] = cx r [ 0 , 1 ] = cy r [ 1 , 0 ] = - cy r [ 1 , 1 ] = cx r [ 2 , 2 ] = 1 r [ 3 : 6 , 3 : 6 ] = r [ 0 : 3 , 0 : 3 ] return r","title":"pf_calcrot()"},{"location":"api/#msa.pf.pf_get_dof","text":"Return degree of freedom numbers of the ends of a plane frame member Parameters: imem ( int ) \u2013 Number of the member df_conn ( pd . DataFrame ) \u2013 Connectivity of members lm ( NDArrayFloat ) \u2013 Location matrix, specifying degree of freedom number for each node Returns: NDArrayInt \u2013 Degree of freedom numbers for node1 and node2 Source code in msa\\pf.py 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 def pf_get_dof ( imem , df_conn , lm ): \"\"\"Return degree of freedom numbers of the ends of a plane frame member Parameters ---------- imem : int Number of the member df_conn : pd.DataFrame Connectivity of members lm : NDArrayFloat Location matrix, specifying degree of freedom number for each node Returns ------- NDArrayInt Degree of freedom numbers for node1 and node2 \"\"\" jt1 , jt2 = pf_get_endjts ( imem , df_conn ) memdof = np . array ([ 0 , 0 , 0 , 0 , 0 , 0 ]) memdof [ 0 : 3 ] = lm [ jt1 - 1 , :] memdof [ 3 : 6 ] = lm [ jt2 - 1 , :] return memdof","title":"pf_get_dof()"},{"location":"api/#msa.pf.pf_get_endcoord","text":"Return the coordinates of the first and second end of a plane frame member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members Returns: xy1 ( Float ) \u2013 Coordinate of node1 xy2 ( Float ) \u2013 Coordinate of node2 Source code in msa\\pf.py 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 def pf_get_endcoord ( imem , df_xy , df_conn ): \"\"\"Return the coordinates of the first and second end of a plane frame member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members Returns ------- xy1 : Float Coordinate of node1 xy2 : Float Coordinate of node2 \"\"\" jt1 , jt2 = pf_get_endjts ( imem , df_conn ) xy1 = df_xy . iloc [ int ( jt1 ) - 1 , :] # type: ignore xy2 = df_xy . iloc [ int ( jt2 ) - 1 , :] # type: ignore return xy1 , xy2","title":"pf_get_endcoord()"},{"location":"api/#msa.pf.pf_get_endjts","text":"Return numbers of first and second end of a plane frame member Parameters: imem ( int ) \u2013 Number of member df_conn ( pd . DataFrame ) \u2013 Connectivity matrix Returns: jt1 ( int ) \u2013 Node1 jt2 ( int ) \u2013 Node 2 Source code in msa\\pf.py 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 def pf_get_endjts ( imem , df_conn : pd . DataFrame ): \"\"\"Return numbers of first and second end of a plane frame member Parameters ---------- imem : int Number of member df_conn : pd.DataFrame Connectivity matrix Returns ------- jt1 : int Node1 jt2 : int Node 2 \"\"\" jt1 , jt2 = df_conn . iloc [ imem - 1 , 0 : 2 ] return jt1 , jt2","title":"pf_get_endjts()"},{"location":"api/#msa.pf.pf_get_memprop","text":"Return the material properties of specified plane frame member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: E ( float ) \u2013 Modulus of elasticity of the member A ( float ) \u2013 Cross-section area of member Iz ( float ) \u2013 Second moment of area of cross-section of the member about the axis of bending L ( float ) \u2013 Length of the member dc ( NDArrayFloat ) \u2013 Direction cosines of the member Source code in msa\\pf.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def pf_get_memprop ( imem , df_xy , df_conn , df_mprop ): \"\"\"Return the material properties of specified plane frame member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table Returns ------- E : float Modulus of elasticity of the member A : float Cross-section area of member Iz : float Second moment of area of cross-section of the member about the axis of bending L : float Length of the member dc : NDArrayFloat Direction cosines of the member \"\"\" m = df_conn . iloc [ imem - 1 , 2 ] - 1 E = df_mprop . iloc [ m , 0 ] A = df_mprop . iloc [ m , 1 ] Iz = df_mprop . iloc [ m , 2 ] xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) return E , A , Iz , L , dc","title":"pf_get_memprop()"},{"location":"api/#msa.pf.pf_gstiff","text":"Calculate the stiffness matrix of a plane frame member in strucutre coordinate system Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: NDArray \u2013 Global stiffness matrix of the member Source code in msa\\pf.py 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 def pf_gstiff ( imem , df_xy , df_conn , df_mprop ): \"\"\"Calculate the stiffness matrix of a plane frame member in strucutre coordinate system Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table Returns ------- NDArray Global stiffness matrix of the member \"\"\" E , A , Iz , L , dc = pf_get_memprop ( imem , df_xy , df_conn , df_mprop ) r = pf_calcrot ( dc ) k = pf_stiff ( E , A , Iz , L ) return r . T @ k @ r","title":"pf_gstiff()"},{"location":"api/#msa.pf.pf_loadvec","text":"Assemble structure load vector due to joint loads and loads applied directly on members Parameters: df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_jtloads ( pd . DataFrame ) \u2013 Nodal loads table df_memloads ( pd . DataFrame ) \u2013 Member load table ndof ( int ) \u2013 Number of degrees of freedom of the structure lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node Returns: NDArrayFloat \u2013 Modified load vector after superposing all member loads Source code in msa\\pf.py 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 def pf_loadvec ( df_xy , df_conn , df_jtloads , df_memloads , ndof , lm ): \"\"\"Assemble structure load vector due to joint loads and loads applied directly on members Parameters ---------- df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_jtloads : pd.DataFrame Nodal loads table df_memloads : pd.DataFrame Member load table ndof : int Number of degrees of freedom of the structure lm : NDArrayInt Location matrix, specifying degree of freedom number for each node Returns ------- NDArrayFloat Modified load vector after superposing all member loads \"\"\" P = np . zeros (( ndof , 1 ), dtype = float ) P = pf_assem_loadvec_jl ( lm , df_jtloads , P ) nml = len ( df_memloads ) for iload in range ( 1 , nml + 1 ): P = pf_assem_loadvec_ml ( iload , df_xy , df_conn , lm , df_memloads , P ) return P","title":"pf_loadvec()"},{"location":"api/#msa.pf.pf_mem_endforces","text":"Calculate member end forces from joint displacements, for one chosen member Parameters: imem ( int ) \u2013 Number of the member df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_mprop ( pd . DataFrame ) \u2013 Material properties table df_memloads ( pd . DataFrame ) \u2013 Member load table lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node x ( NDArrayFloat ) \u2013 Displacement vector Returns: NDArrayFloat \u2013 Vector of member end forces Source code in msa\\pf.py 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 def pf_mem_endforces ( imem , df_xy , df_conn , df_mprop , df_memloads , lm , x ): \"\"\"Calculate member end forces from joint displacements, for one chosen member Parameters ---------- imem : int Number of the member df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_mprop : pd.DataFrame Material properties table df_memloads : pd.DataFrame Member load table lm : NDArrayInt Location matrix, specifying degree of freedom number for each node x : NDArrayFloat Displacement vector Returns ------- NDArrayFloat Vector of member end forces \"\"\" xy1 , xy2 = pf_get_endcoord ( imem , df_xy , df_conn ) L , dc = pf_calclen ( xy1 , xy2 ) E , A , Iz , L , dc = pf_get_memprop ( imem , df_xy , df_conn , df_mprop ) r = pf_calcrot ( dc ) u = np . zeros (( 6 , 1 ), dtype = float ) memdof = pf_get_dof ( imem , df_conn , lm ) for i in range ( 6 ): if memdof [ i ]: idof = memdof [ i ] u [ i ] = x [ idof - 1 ] uu = np . dot ( r , u ) k = pf_stiff ( E , A , Iz , L ) f = np . zeros (( 6 , 1 ), dtype = float ) f = np . dot ( k , uu ) nml = len ( df_memloads ) for i in range ( nml ): if df_memloads . iloc [ i , 0 ] == imem : f += df_memloads . iloc [ i , 1 :] . values . reshape ( 6 , 1 ) return f","title":"pf_mem_endforces()"},{"location":"api/#msa.pf.pf_ssm","text":"Assemble structure stiffness matrix by superposing stiffness matrices of individual members Parameters: df_xy ( pd . DataFrame ) \u2013 Coordinates of nodes df_conn ( pd . DataFrame ) \u2013 Connectivity of members df_bc ( pd . DataFrame ) \u2013 Zero boundary conditions table, for nodes with one or more constrained degrees of freedom df_mprop ( pd . DataFrame ) \u2013 Material properties table Returns: ssm ( NDArrayFloat ) \u2013 Structure stiffness matrix of the structure lm ( NDArrayInt ) \u2013 Location matrix, specifying degree of freedom number for each node ndof ( int ) \u2013 Number of degrees of freedom of the structure Source code in msa\\pf.py 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 def pf_ssm ( df_xy , df_conn , df_bc , df_mprop ): \"\"\"Assemble structure stiffness matrix by superposing stiffness matrices of individual members Parameters ---------- df_xy : pd.DataFrame Coordinates of nodes df_conn : pd.DataFrame Connectivity of members df_bc : pd.DataFrame Zero boundary conditions table, for nodes with one or more constrained degrees of freedom df_mprop : pd.DataFrame Material properties table Returns ------- ssm : NDArrayFloat Structure stiffness matrix of the structure lm : NDArrayInt Location matrix, specifying degree of freedom number for each node ndof : int Number of degrees of freedom of the structure \"\"\" n = len ( df_xy ) lm , ndof = pf_calclm ( n , df_bc ) nmem = len ( df_conn ) ssm = np . zeros (( ndof , ndof ), dtype = float ) for imem in range ( 1 , nmem + 1 ): ssm = pf_assemssm ( imem , df_xy , df_conn , df_mprop , lm , ssm ) return ssm , lm , ndof","title":"pf_ssm()"},{"location":"api/#msa.pf.pf_stiff","text":"Calculate stiffness of a plane frame member in local coordinate system Parameters: E ( float ) \u2013 Modulus of elasticity of material of the member A ( float ) \u2013 Cross-section area of the member Iz ( float ) \u2013 Second moment of area of the member about the axis of bending L ( float ) \u2013 Length of the member Returns: NDArrayFloat \u2013 Stiffness matrix of member about local axes Source code in msa\\pf.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def pf_stiff ( E : float , A : float , Iz : float , L : float ) -> NDArrayFloat : \"\"\"Calculate stiffness of a plane frame member in local coordinate system Parameters ---------- E : float Modulus of elasticity of material of the member A : float Cross-section area of the member Iz : float Second moment of area of the member about the axis of bending L : float Length of the member Returns ------- NDArrayFloat Stiffness matrix of member about local axes \"\"\" k = np . zeros (( 6 , 6 ), dtype = float ) k [ 0 , 0 ] = float ( E ) * A / L k [ 0 , 3 ] = - k [ 0 , 0 ] k [ 1 , 1 ] = ( 12.0 * E * Iz ) / L ** 3 k [ 1 , 2 ] = ( 6.0 * E * Iz ) / L ** 2 k [ 1 , 4 ] = - k [ 1 , 1 ] k [ 1 , 5 ] = k [ 1 , 2 ] k [ 2 , 2 ] = ( 4.0 * E * Iz ) / L k [ 2 , 4 ] = - k [ 1 , 2 ] k [ 2 , 5 ] = k [ 2 , 2 ] / 2.0 k [ 3 , 3 ] = k [ 0 , 0 ] k [ 4 , 4 ] = k [ 1 , 1 ] k [ 4 , 5 ] = - k [ 1 , 2 ] k [ 5 , 5 ] = k [ 2 , 2 ] for i in range ( 6 ): for j in range ( i ): k [ i , j ] = k [ j , i ] return k","title":"pf_stiff()"},{"location":"api/#msa.pf.print_mat","text":"Print the array k, preceded by a header string. Each element of k is printed using the format string fmt Parameters: header ( str ) \u2013 Header to be printed before printing the matrix k ( npt . NDArray [ Any ] ) \u2013 Matrix to be printed Source code in msa\\pf.py 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 def print_mat ( header : str , k : npt . NDArray [ Any ]) -> None : \"\"\"Print the array k, preceded by a header string. Each element of k is printed using the format string fmt Parameters ---------- header : str Header to be printed before printing the matrix k : npt.NDArray[Any] Matrix to be printed \"\"\" m , n = k . shape print ( f \" { header } Size: { m } x { n } \" ) for i in range ( m ): for j in range ( n ): print ( f \" { k [ i , j ] : 12.4f } \" , end = \"\" ) print ()","title":"print_mat()"},{"location":"usermanual/","text":"User Manual \u00b6 Data can be input to pf.py in one of the following ways: As data, mostly in the form of a series of numpy.ndarray s with specific variable names, in a Python script. This data must subsequntly converted into Pandas dataframes using pf.data2df() function. As Pandas DataFrames with specific variable names, column names and column dtypes . As a TOML file with specific names for variables As an sqlite3 database with specific names for tables and specific schema for each table Irrespective of how the data is input, the entire input data is finally represented in the form of Pandas DataFrames with the specified names, column names and data types. In the description below, np.ndarray[(:, 2), np.float_] implies a numpy array with as many rows as required ( : ) and all elements of type np.float_ . As an example a coordinates of a 2 node structure could be defined as follows: xy = np.array([ [0, 0], [5, 0] ], dtype=np.float_) which has 2 rows and elements are stored as floating point numbers. An empty matrix, such as when no nodal loads are applied on the structure should be resresented as: jtloads = np.array([], dtype=np.float_) The names of variables and their column names and data types are as follows: title: str is a string specifying a user defined title for the problem xy: np.ndarray[(:, 2), np.float_] are the (x, y) coordinates of the nodes of the plane frame. Row index + 1 is the node number. In a Pandas DataFrame, the column names must be x and y . Data types of both columns must be np.float_ . conn: np.ndarray[(:, 3), np.int_] is the connectivity matrix for the members of the structure. Row index + 1 is the member number. Columns 1 and 2 represent the origin node n1 and far node n2 of the member and column 3 represents the material property id, to be defined later. In a Pandas DataFrame, the column names are node1 , node2 , mprop . All columns are of type np.int_ . bc: np.ndarray[(:, 4), np.int_] is the zero boundary condition matrix specifying the support conditions. Row index + 1 is the support constraint for a constrained node. Column 1 specifies the node id to which the constraints are to be applied. Columns 2, 3 and 4 represent the constraints to be applied to the ux , uy and rz degrees of freedom of the node, where ux and uy are linear displacements along the global x and y axes and rz is the rotatiion about the global z axis. Constraint code 1 implies the corresponding degree of freedom is constrained (zero displacement) and 1 implies the corresponding degree of freedom is unconstrained (non-zero unknown displacement that needs to be determined). For example, if node number 1 is a fixed support, it would be represented by the row 2 1 1 1 and if node number 3 is a hinged support, it would be repesented as 3 1 1 0 . Constraints for a node need be specified only when one or more of its degrees of freedom are constrained. Remaining nodes are considered unconstrained. mprop: np.ndarray[(:, 3), np.float_] is a matrix representing each unique material property. Row index + 1 is the material number. Column 1 repesents the modulus of elasticity E , column 2 repesents the cross-section area A and column 3 repesents the second moment of area about the axis of bending Iz . In a Pandas DataFrame, the column names should be E , A and Iz . All columns are of type np.float_ . When multiple members have the same material properties, it need be defined only once and the material property id must be indicated in the connectivity matrix conn defined above. jtloads: np.ndarray[(:, 4), np.float] is the nodal load matrix. Row index + 1 is the nodal load number. Column 1 represents the number of the node to which the nodal load must be assigned. Columns 2 and 3 repesent the magnitudes of the x and y components of the load applied at the node and column 3 repesents the moment applied about the z axis at the specified node. Each nodal load must be defined independently, even when it may be identical to another load applied on a different node. In a Pandas DataFrame, the columns names must be node , Px , Py , Mz . Data type of the first column must be np.int_ and columns 2 to 4 must be np.float_ . When defining joint loads as a numpy array, all columns are defined as np.float_ and the function pf.data2df() will automatically ensure the proper column names and data types. Note: If no nodal loads are applied on any of the nodes of the structure, it must be defined as an empty array or DataFrame. memloads: np.ndarray[(:, 7), np.float_] is the member load matrix. Row index + 1 is the member load number. Column 1 represents the number of the member to which the nodal load must be assigned. Columns 2, 3, 4 repesent the magnitudes of the loads applied at the origin node of the member and columns 5, 6, 7 represent the loads applied at the far node of the member. Loads at each node follow the sequence Px , Py , Mz . Each member load must be defined independently, even when it may be identical to another load applied on a different member. In a Pandas DataFrame, the columns names must be member , Px1 , Py1 , Mz1 , Px2 , Py2 , Mz2 . Data type of the first column must be np.int_ and columns 2 to 7 must be np.float_ . When defining member loads as a numpy array, all columns are defined as np.float_ and the function pf.data2df() will automatically ensure the proper column names and data types. Member loads must be computed as the negative of the fixed end reactions produced in the member when subjected to the specified loads (may be one or more). These must be computed by the user and the program at present does not calculate these automatically for the common types of loads noramlly encountered in practice. Note: If no loads are applied on any of the nodes of the structure, it must be defined as an empty array or DataFrame.","title":"User Manual"},{"location":"usermanual/#user-manual","text":"Data can be input to pf.py in one of the following ways: As data, mostly in the form of a series of numpy.ndarray s with specific variable names, in a Python script. This data must subsequntly converted into Pandas dataframes using pf.data2df() function. As Pandas DataFrames with specific variable names, column names and column dtypes . As a TOML file with specific names for variables As an sqlite3 database with specific names for tables and specific schema for each table Irrespective of how the data is input, the entire input data is finally represented in the form of Pandas DataFrames with the specified names, column names and data types. In the description below, np.ndarray[(:, 2), np.float_] implies a numpy array with as many rows as required ( : ) and all elements of type np.float_ . As an example a coordinates of a 2 node structure could be defined as follows: xy = np.array([ [0, 0], [5, 0] ], dtype=np.float_) which has 2 rows and elements are stored as floating point numbers. An empty matrix, such as when no nodal loads are applied on the structure should be resresented as: jtloads = np.array([], dtype=np.float_) The names of variables and their column names and data types are as follows: title: str is a string specifying a user defined title for the problem xy: np.ndarray[(:, 2), np.float_] are the (x, y) coordinates of the nodes of the plane frame. Row index + 1 is the node number. In a Pandas DataFrame, the column names must be x and y . Data types of both columns must be np.float_ . conn: np.ndarray[(:, 3), np.int_] is the connectivity matrix for the members of the structure. Row index + 1 is the member number. Columns 1 and 2 represent the origin node n1 and far node n2 of the member and column 3 represents the material property id, to be defined later. In a Pandas DataFrame, the column names are node1 , node2 , mprop . All columns are of type np.int_ . bc: np.ndarray[(:, 4), np.int_] is the zero boundary condition matrix specifying the support conditions. Row index + 1 is the support constraint for a constrained node. Column 1 specifies the node id to which the constraints are to be applied. Columns 2, 3 and 4 represent the constraints to be applied to the ux , uy and rz degrees of freedom of the node, where ux and uy are linear displacements along the global x and y axes and rz is the rotatiion about the global z axis. Constraint code 1 implies the corresponding degree of freedom is constrained (zero displacement) and 1 implies the corresponding degree of freedom is unconstrained (non-zero unknown displacement that needs to be determined). For example, if node number 1 is a fixed support, it would be represented by the row 2 1 1 1 and if node number 3 is a hinged support, it would be repesented as 3 1 1 0 . Constraints for a node need be specified only when one or more of its degrees of freedom are constrained. Remaining nodes are considered unconstrained. mprop: np.ndarray[(:, 3), np.float_] is a matrix representing each unique material property. Row index + 1 is the material number. Column 1 repesents the modulus of elasticity E , column 2 repesents the cross-section area A and column 3 repesents the second moment of area about the axis of bending Iz . In a Pandas DataFrame, the column names should be E , A and Iz . All columns are of type np.float_ . When multiple members have the same material properties, it need be defined only once and the material property id must be indicated in the connectivity matrix conn defined above. jtloads: np.ndarray[(:, 4), np.float] is the nodal load matrix. Row index + 1 is the nodal load number. Column 1 represents the number of the node to which the nodal load must be assigned. Columns 2 and 3 repesent the magnitudes of the x and y components of the load applied at the node and column 3 repesents the moment applied about the z axis at the specified node. Each nodal load must be defined independently, even when it may be identical to another load applied on a different node. In a Pandas DataFrame, the columns names must be node , Px , Py , Mz . Data type of the first column must be np.int_ and columns 2 to 4 must be np.float_ . When defining joint loads as a numpy array, all columns are defined as np.float_ and the function pf.data2df() will automatically ensure the proper column names and data types. Note: If no nodal loads are applied on any of the nodes of the structure, it must be defined as an empty array or DataFrame. memloads: np.ndarray[(:, 7), np.float_] is the member load matrix. Row index + 1 is the member load number. Column 1 represents the number of the member to which the nodal load must be assigned. Columns 2, 3, 4 repesent the magnitudes of the loads applied at the origin node of the member and columns 5, 6, 7 represent the loads applied at the far node of the member. Loads at each node follow the sequence Px , Py , Mz . Each member load must be defined independently, even when it may be identical to another load applied on a different member. In a Pandas DataFrame, the columns names must be member , Px1 , Py1 , Mz1 , Px2 , Py2 , Mz2 . Data type of the first column must be np.int_ and columns 2 to 7 must be np.float_ . When defining member loads as a numpy array, all columns are defined as np.float_ and the function pf.data2df() will automatically ensure the proper column names and data types. Member loads must be computed as the negative of the fixed end reactions produced in the member when subjected to the specified loads (may be one or more). These must be computed by the user and the program at present does not calculate these automatically for the common types of loads noramlly encountered in practice. Note: If no loads are applied on any of the nodes of the structure, it must be defined as an empty array or DataFrame.","title":"User Manual"}]}